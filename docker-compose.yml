version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: ghl-booking-api
    ports:
      - "8000:8000"
    environment:
      - PORT=8000
      - PYTHONPATH=/app
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GHL_API_KEY=${GHL_API_KEY}
      - GHL_LOCATION_ID=${GHL_LOCATION_ID}
      - GHL_WEBHOOK_SECRET=${GHL_WEBHOOK_SECRET}
      - LANGSMITH_API_KEY=${LANGSMITH_API_KEY:-}
      - LANGSMITH_TRACING=${LANGSMITH_TRACING:-false}
      - LANGSMITH_PROJECT=${LANGSMITH_PROJECT:-ghl-booking-python}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - NODE_ENV=${NODE_ENV:-development}
    volumes:
      # Mount source code for hot reload in development
      - ./app:/app/app:ro
      - ./config:/app/config:ro
      - ./tests:/app/tests:ro
    networks:
      - ghl-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: ghl-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - ghl-network
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123}
    healthcheck:
      test: ["CMD", "redis-cli", "--auth", "${REDIS_PASSWORD:-redis123}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # PostgreSQL for persistent storage (optional)
  postgres:
    image: postgres:15-alpine
    container_name: ghl-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-ghluser}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-ghlpass}
      - POSTGRES_DB=${POSTGRES_DB:-ghlbooking}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - ghl-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-ghluser}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Nginx reverse proxy (optional for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: ghl-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - ghl-network
    restart: unless-stopped

networks:
  ghl-network:
    driver: bridge

volumes:
  redis-data:
  postgres-data: